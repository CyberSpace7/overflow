'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _rcAlign = require('rc-align');

var _rcAlign2 = _interopRequireDefault(_rcAlign);

var _rcUtil = require('rc-util');

var _rcUtil2 = _interopRequireDefault(_rcUtil);

var _rcAnimate = require('rc-animate');

var _rcAnimate2 = _interopRequireDefault(_rcAnimate);

var _Panel = require('./Panel');

var _Panel2 = _interopRequireDefault(_Panel);

var toFragment = _rcUtil2['default'].Children.mapSelf;

function refFn(field, component) {
  this[field] = component;
}

function prevent(e) {
  e.preventDefault();
}

var ColorPicker = (function (_React$Component) {
  _inherits(ColorPicker, _React$Component);

  function ColorPicker(props) {
    var _this = this;

    _classCallCheck(this, ColorPicker);

    _get(Object.getPrototypeOf(ColorPicker.prototype), 'constructor', this).call(this, props);

    this.state = {
      color: props.color || props.defaultColor,
      alpha: props.alpha === undefined ? props.defaultAlpha : props.alpha,
      open: false
    };

    var events = ['getAlign', 'onTriggerClick', 'onChange', 'onBlur', 'getPickerElement', 'getRootDOMNode', 'getTriggerDOMNode', 'getTransitionName'];

    events.forEach(function (e) {
      _this[e] = _this[e].bind(_this);
    });

    this.savePickerPanelRef = refFn.bind(this, 'pickerPanelInstance');
    this.saveTriggerRef = refFn.bind(this, 'triggerInstance');
  }

  _createClass(ColorPicker, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.color) {
        this.setState({
          color: nextProps.color
        });
      }
      if (nextProps.alpha) {
        this.setState({
          alpha: nextProps.alpha
        });
      }
    }
  }, {
    key: 'onTriggerClick',
    value: function onTriggerClick() {
      this.setState({
        open: !this.state.open
      });
    }
  }, {
    key: 'onChange',
    value: function onChange(colors) {
      this.setState({
        color: colors.color,
        alpha: colors.alpha
      });
      this.props.onChange(colors);
    }
  }, {
    key: 'onBlur',
    value: function onBlur() {
      this.setState({
        open: false
      });
    }
  }, {
    key: 'onAlign',
    value: function onAlign(node) {
      // focus after align
      if (node !== document.activeElement && !_rcUtil2['default'].Dom.contains(node, document.activeElement)) {
        node.focus();
      }
    }
  }, {
    key: 'getTransitionName',
    value: function getTransitionName() {
      var props = this.props;
      var transitionName = props.transitionName;
      if (!transitionName && props.animation) {
        transitionName = props.prefixCls + '-' + props.animation;
      }
      return transitionName;
    }
  }, {
    key: 'getAlign',
    value: function getAlign(orient) {
      var points = ['tl', 'bl'];
      var offset = [0, 5];
      if (orient.indexOf('top') !== -1 && orient.indexOf('left') !== -1) {
        points = ['tl', 'bl'];
      } else if (orient.indexOf('top') !== -1 && orient.indexOf('right') !== -1) {
        points = ['tr', 'br'];
      } else if (orient.indexOf('bottom') !== -1 && orient.indexOf('left') !== -1) {
        points = ['bl', 'tl'];
        offset = [0, -5];
      } else if (orient.indexOf('bottom') !== -1 && orient.indexOf('right') !== -1) {
        points = ['br', 'tr'];
        offset = [0, -5];
      }

      var adjustOrientOnPickerOverflow = this.props.adjustOrientOnPickerOverflow;

      return {
        points: points,
        offset: offset,
        overflow: {
          adjustX: adjustOrientOnPickerOverflow,
          adjustY: adjustOrientOnPickerOverflow
        }
      };
    }
  }, {
    key: 'getPickerElement',
    value: function getPickerElement() {
      var state = this.state;
      var pickerPanelElement = _react2['default'].createElement(_Panel2['default'], {
        ref: this.savePickerPanelRef,
        defaultColor: this.state.color,
        alpha: this.state.alpha,
        prefixCls: this.props.prefixCls + '-panel',
        onChange: this.onChange,
        onBlur: this.onBlur,
        mode: this.props.mode
      });

      var orient = this.props.orient;

      return _react2['default'].createElement(
        _rcAnimate2['default'],
        {
          component: '',
          exclusive: true,
          animateMount: true,
          showProp: 'pickerOpen',
          transitionName: this.getTransitionName()
        },
        _react2['default'].createElement(
          _rcAlign2['default'],
          { target: this.getTriggerDOMNode,
            key: 'picker',
            onAlign: this.onAlign,
            monitorWindowResize: true,
            disabled: !state.open,
            pickerOpen: state.open,
            align: this.getAlign(orient) },
          pickerPanelElement
        )
      );
    }
  }, {
    key: 'getRootDOMNode',
    value: function getRootDOMNode() {
      return _react2['default'].findDOMNode(this);
    }
  }, {
    key: 'getTriggerDOMNode',
    value: function getTriggerDOMNode() {
      return _react2['default'].findDOMNode(this.triggerInstance);
    }
  }, {
    key: 'render',
    value: function render() {
      var props = this.props;
      var classes = [props.prefixCls];
      if (this.state.open) {
        classes.push(props.prefixCls + '-open');
      }

      var trigger = props.trigger;

      if (trigger) {
        trigger = _react2['default'].cloneElement(trigger, {
          ref: this.saveTriggerRef,
          unselectable: true,
          style: {
            opacity: this.state.alpha / 100,
            backgroundColor: this.state.color
          },
          onClick: this.onTriggerClick,
          onMouseDown: prevent
        });
      }

      var picker = undefined;

      this.haveOpened = this.haveOpened || this.state.open;

      if (this.haveOpened) {
        picker = this.getPickerElement();
      }

      return _react2['default'].createElement(
        'span',
        { className: classes.join(' ') },
        toFragment([picker, trigger])
      );
    }
  }]);

  return ColorPicker;
})(_react2['default'].Component);

exports['default'] = ColorPicker;

ColorPicker.propTypes = {
  adjustOrientOnPickerOverflow: _react2['default'].PropTypes.bool,
  animation: _react2['default'].PropTypes.string,
  orient: _react2['default'].PropTypes.arrayOf(_react2['default'].PropTypes.oneOf(['left', 'top', 'right', 'bottom'])),
  color: _react2['default'].PropTypes.string,
  alpha: _react2['default'].PropTypes.number,
  onChange: _react2['default'].PropTypes.func,
  prefixCls: _react2['default'].PropTypes.string.isRequired,
  trigger: _react2['default'].PropTypes.node.isRequired,
  mode: _react2['default'].PropTypes.string
};

ColorPicker.defaultProps = {
  adjustOrientOnPickerOverflow: true,
  defaultColor: '#F00',
  defaultHsv: null,
  defaultAlpha: 100,
  orient: ['top', 'left'],
  onChange: function onChange() {},
  prefixCls: 'react-colorpicker',
  trigger: _react2['default'].createElement('span', { className: 'react-colorpicker-trigger' })
};
module.exports = exports['default'];